/*****************************************************************
 * Parser.java
 * 
 * Copyright ©2020 Ronald Berdúo. All Rights Reserved.
 * This software is the proprietary information of Ronald Berdúo.
 *
 *****************************************************************/
package com.neftxx.interpreter.jflex_cup;

import com.neftxx.interpreter.AritLanguage;
import com.neftxx.interpreter.ast.AstNode;
import com.neftxx.interpreter.ast.expression.assignment.Assignment;
import com.neftxx.interpreter.ast.expression.Expression;
import com.neftxx.interpreter.ast.expression.assignment.Dimension;
import com.neftxx.interpreter.ast.expression.assignment.PositionAssignment;
import com.neftxx.interpreter.ast.expression.function.DefaultArgument;
import com.neftxx.interpreter.ast.expression.function.FunctionCall;
import com.neftxx.interpreter.ast.expression.Identifier;
import com.neftxx.interpreter.ast.expression.Literal;
import com.neftxx.interpreter.ast.statement.Block;
import com.neftxx.interpreter.ast.expression.function.FormalParameter;
import com.neftxx.interpreter.ast.expression.function.Function;
import com.neftxx.interpreter.ast.type.TypeFacade;
import com.neftxx.util.NodeInfo;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author Ronald Berdúo
 */
parser code {:
    /**
     * Manejador de tipos
     */
    private static final TypeFacade TYPE_FACADE = TypeFacade.getInstance();
    
    /**
     * analizador
     */
    private AritLanguage aritLanguage;

    /**
     * Nombre del archivo que esta analizando
     */
    private String filename;

    /**
     * Constructor del analizador sintactico
     *
     * @param scann  Analizador lexico
     * @param sf     Fabrica de simbolos
     */
    public Parser(Lexer scann, ComplexSymbolFactory sf, AritLanguage aritLanguage) {
        super(scann, sf);
        this.aritLanguage = aritLanguage;
        this.filename = aritLanguage.filename;
    }

    /**
     *
     * Método al que se llama automaticamente ante algun error sintactico.
     *
     * @param s simbolo que provoco el error
     */
    @Override
    public void syntax_error(java_cup.runtime.Symbol s) {
        ComplexSymbol cs = (ComplexSymbol) s;
        error("Error: No se esperaba el siguiente simbolo " + cs.getName() + ".",
            cs.getLeft().getLine(), cs.getRight().getColumn());
    }

    /**
     *
     * Método al que se llama en el momento en que ya no es posible una
     * recuperacion de errores.

     * @param s simbolo que provoco el error
     * @throws Exception
     */
    @Override
    public void unrecovered_syntax_error(java_cup.runtime.Symbol s) throws Exception {
        ComplexSymbol cs = (ComplexSymbol) s;
        error("Error irrecuperable provocado simbolo " + cs.getName() + ".",
        cs.getLeft().getLine(), cs.getRight().getColumn());
    }

    /**
     * Guarda los errores en el manejador
     *
     * @param message mensaje de por que se provoco el error
     * @param line linea donde se encuentra el error
     * @param column columna donde se encuentra el error
     */
    private void error(String message, int line, int column) {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList<>();
        for (Integer expected : ids) {
            list.add(this.symbl_name_from_id(expected));
        }
        if (list.isEmpty()) {
            aritLanguage.addSyntacticError(message, new NodeInfo(line, column, filename));
        } else {
            aritLanguage.addSyntacticError(message + "\nSi no que se esperaba alguno de los siguientes tokens: " + list,
                new NodeInfo(line, column, filename));
        }
    }
:};

/* Terminales (tokens devueltos por el escáner). */

/* Palabras claves */
terminal CONTINUE, FUNCTION, DEFAULT, RETURN, SWITCH, BREAK, WHILE, CASE, ELSE, FOR, IN, DO, IF;

/* Literales */
terminal Integer LIT_ENTERO;
terminal Double  LIT_DECIMAL;
terminal Boolean LIT_BOOLEANO;
terminal String  LIT_STRING;
terminal String  ID;
terminal String  NULL;

/* Separadores */
terminal LAMBDA, IGUAL_QUE, DIFERENTE_QUE, MAYOR_IGUAL_QUE, MENOR_IGUAL_QUE, MODULO,
MAS, MENOS, MULT, DIV, POTENCIA, IGUAL, MAYOR_QUE, MENOR_QUE, INTERROGANTE,
DOS_PUNTOS, OR, AND, NOT, PAR_IZQ, PAR_DER, COR_IZQ, COR_DER, PUNTO_COMA,
COMA, LLAVE_IZQ, LLAVE_DER, UMENOS;


/* No Terminales */
non terminal compilation_unit;
non terminal ArrayList<AstNode> global_statements;
non terminal AstNode global_statement;
non terminal Function function_declaration;
non terminal ArrayList<FormalParameter> formal_parameter_list;
non terminal FormalParameter formal_parameter;
non terminal Block block;
non terminal ArrayList<AstNode> block_statements;
non terminal AstNode statement;
non terminal Expression statement_expression;
non terminal Expression expression;
non terminal Expression var_assigment;
non terminal ArrayList<Expression> access_list;
non terminal ArrayList<Dimension> var_dimensions;
non terminal Expression function_call;
non terminal ArrayList<Expression> argument_list;
non terminal Expression default_exp;

                                /* Precedencias */

/*Asociatividad */ /* Operador */                                           /* Nivel */
precedence right    IGUAL, LAMBDA;                                          // 1
precedence right    INTERROGANTE, DOS_PUNTOS;                               // 2
precedence left     OR;                                                     // 3
precedence left     AND;                                                    // 4
precedence left     DIFERENTE_QUE, IGUAL_QUE;                               // 5
precedence nonassoc MAYOR_IGUAL_QUE, MAYOR_QUE, MENOR_IGUAL_QUE, MENOR_QUE; // 6
precedence left     MAS, MENOS;                                             // 7
precedence left     MULT, DIV, MODULO;                                      // 8
precedence left     POTENCIA;                                               // 9
precedence right    UMENOS, NOT;                                            // 10;
precedence left     COR_IZQ, COR_DER, PAR_IZQ, PAR_DER;                     // 11;


/* Reglas gramaticales */
start with compilation_unit;


compilation_unit
    ::= global_statements:astNodes {:
        if (astNodes != null) aritLanguage.setAstNodes(astNodes);
    :}
;

global_statements
    ::= global_statements:statements global_statement:statement {:
            RESULT = statements;
            if (statement != null) RESULT.add(statement);
        :}
    |   global_statement:statement {:
            RESULT = new ArrayList<>();
            if (statement != null) RESULT.add(statement);
        :}
;

global_statement
    ::= statement:statement {: RESULT = statement; :}
    |   function_declaration:function {: RESULT = function; :}
    |   error PUNTO_COMA
;

function_declaration
    ::= ID:id IGUAL FUNCTION PAR_IZQ formal_parameter_list:parameters PAR_DER block:block {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new Function(info, id, parameters, block);
        :}
    |   ID:id IGUAL FUNCTION PAR_IZQ PAR_DER block:block {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new Function(info, id, block);
        :}
    |   ID:id IGUAL PAR_IZQ ID:idParameter COMA formal_parameter_list:parameters PAR_DER LAMBDA block:block {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            NodeInfo infoParameter = new NodeInfo(idParameterxleft.getLine(), idParameterxright.getColumn(), filename);
            parameters.add(0, new FormalParameter(infoParameter, idParameter));
            RESULT = new Function(info, id, parameters, block);
        :}
    |   ID:id IGUAL PAR_IZQ ID:idParameter IGUAL expression:expParameter COMA formal_parameter_list:parameters PAR_DER LAMBDA block:block {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            NodeInfo infoParameter = new NodeInfo(idParameterxleft.getLine(), idParameterxright.getColumn(), filename);
            parameters.add(0, new FormalParameter(infoParameter, idParameter, expParameter));
            RESULT = new Function(info, id, parameters, block);
        :}
    |   ID:id IGUAL PAR_IZQ ID:idParameter PAR_DER LAMBDA block:block {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            ArrayList<FormalParameter> parameters = new ArrayList<>();
            NodeInfo infoParameter = new NodeInfo(idParameterxleft.getLine(), idParameterxright.getColumn(), filename);
            parameters.add(new FormalParameter(infoParameter, idParameter));
            RESULT = new Function(info, id, parameters, block);
        :}
    |   ID:id IGUAL PAR_IZQ ID:idParameter IGUAL expression:expParameter PAR_DER LAMBDA block:block {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            ArrayList<FormalParameter> parameters = new ArrayList<>();
            NodeInfo infoParameter = new NodeInfo(idParameterxleft.getLine(), idParameterxright.getColumn(), filename);
            parameters.add(new FormalParameter(infoParameter, idParameter, expParameter));
            RESULT = new Function(info, id, parameters, block);
        :}
    |   ID:id IGUAL PAR_IZQ PAR_DER LAMBDA block:block {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new Function(info, id, block);
        :}
;

formal_parameter_list
    ::= formal_parameter_list:parameters COMA formal_parameter:parameter {: RESULT = parameters; RESULT.add(parameter); :}
    |   formal_parameter:parameter {: RESULT = new ArrayList<>(); RESULT.add(parameter); :}
;

formal_parameter
    ::= ID:id {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new FormalParameter(info, id);
        :}
    |   ID:id IGUAL expression:exp {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new FormalParameter(info, id, exp);
        :}
;

block
    ::= LLAVE_IZQ:llave LLAVE_DER {:
            NodeInfo info = new NodeInfo(llavexleft.getLine(), llavexright.getColumn(), filename);
            RESULT = new Block(info);
        :}
    |   LLAVE_IZQ:llave block_statements:statements LLAVE_DER {:
            NodeInfo info = new NodeInfo(llavexleft.getLine(), llavexright.getColumn(), filename);
            RESULT = new Block(info, statements);
        :}
;

block_statements
    ::= block_statements:statements statement:statement {:
            RESULT = statements;
            if (statement != null) RESULT.add(statement);
        :}
    |   statement:statement {:
            RESULT = new ArrayList<>();
            if (statement != null) RESULT.add(statement);
        :}
;

statement
    ::= statement_expression:expression PUNTO_COMA {: RESULT = expression; :}
    |   statement_expression:expression {: RESULT = expression; :}
;

statement_expression
    ::= var_assigment:assigment {: RESULT = assigment; :}
    |   function_call:functionCall {: RESULT = functionCall; :}
;

var_assigment
    ::= ID:id IGUAL expression:expression {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new Assignment(info, id, expression);
        :}
    |   ID:id var_dimensions:dimensions IGUAL expression:expression {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new PositionAssignment(info, id, dimensions, expression);
        :}
;

var_dimensions
    ::= var_dimensions:dimensions COR_IZQ access_list:access COR_DER {:
            RESULT = dimensions;
            if (access != null) {
                NodeInfo info = new NodeInfo(accessxleft.getLine(), accessxright.getColumn(), filename);
                RESULT.add(new Dimension(info, access, false));
            }
        :}
    |   var_dimensions:dimensions COR_IZQ COR_IZQ access_list:access COR_DER COR_DER {:
            RESULT = dimensions;
            if (access != null) {
                NodeInfo info = new NodeInfo(accessxleft.getLine(), accessxright.getColumn(), filename);
                RESULT.add(new Dimension(info, access, true));
            }
        :}
    |   COR_IZQ access_list:access COR_DER {:
            RESULT = new ArrayList<>();
            if (access != null) {
                NodeInfo info = new NodeInfo(accessxleft.getLine(), accessxright.getColumn(), filename);
                RESULT.add(new Dimension(info, access, false));
            }
        :}
    |   COR_IZQ COR_IZQ access_list:access COR_DER COR_DER COR_DER {:
            RESULT = new ArrayList<>();
            if (access != null) {
                NodeInfo info = new NodeInfo(accessxleft.getLine(), accessxright.getColumn(), filename);
                RESULT.add(new Dimension(info, access, true));
            }
        :}
;

access_list
    ::= access_list:accessList COMA expression:access {: RESULT = accessList; RESULT.add(access); :}
    |   expression:access {: RESULT = new ArrayList<>(); RESULT.add(access); :}
;

function_call
    ::= ID:id PAR_IZQ PAR_DER {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new FunctionCall(info, id);
        :}
    |   ID:id PAR_IZQ argument_list:arguments PAR_DER {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new FunctionCall(info, id, arguments);
        :}
;

expression
    ::= statement_expression:expression {: RESULT = expression; :}
    |   expression:condition INTERROGANTE expression:exp1 DOS_PUNTOS expression:exp2 {:
        :}
    |   expression OR expression {:
        :}
    |   expression AND expression {:
        :}
    |   expression DIFERENTE_QUE expression {:
        :}
    |   expression IGUAL_QUE expression {:
        :}
    |   expression MAYOR_IGUAL_QUE expression {:
        :}
    |   expression MAYOR_QUE expression {:
        :}
    |   expression MENOR_IGUAL_QUE expression {:
        :}
    |   expression MENOR_QUE expression {:
        :}
    |   expression MAS expression {:
        :}
    |   expression MENOS expression {:
        :}
    |   expression MULT expression {:
        :}
    |   expression DIV expression {:
        :}
    |   expression MODULO expression {:
        :}
    |   expression POTENCIA expression {:
        :}
    |   expression COR_IZQ expression COR_DER {:
        :}
    |   expression COR_IZQ COR_IZQ expression COR_DER COR_DER {:
        :}
    |   PAR_IZQ expression:exp PAR_DER {: RESULT = exp; :}
    |   ID:id {:
            NodeInfo info = new NodeInfo(idxleft.getLine(), idxright.getColumn(), filename);
            RESULT = new Identifier(info, id);
        :}
    |   LIT_ENTERO:lit {:
            NodeInfo info = new NodeInfo(litxleft.getLine(), litxright.getColumn(), filename);
            RESULT = new Literal(info, TYPE_FACADE.getIntegerType(), lit);
        :}
    |   LIT_DECIMAL:lit {:
            NodeInfo info = new NodeInfo(litxleft.getLine(), litxright.getColumn(), filename);
            RESULT = new Literal(info, TYPE_FACADE.getNumericType(), lit);
        :}
    |   LIT_BOOLEANO:lit {:
            NodeInfo info = new NodeInfo(litxleft.getLine(), litxright.getColumn(), filename);
            RESULT = new Literal(info, TYPE_FACADE.getBooleanType(), lit);
        :}
    |   LIT_STRING:lit {:
            NodeInfo info = new NodeInfo(litxleft.getLine(), litxright.getColumn(), filename);
            RESULT = new Literal(info, TYPE_FACADE.getStringType(), lit);
        :}
    |   NULL:lit {:
            NodeInfo info = new NodeInfo(litxleft.getLine(), litxright.getColumn(), filename);
            RESULT = new Literal(info, TYPE_FACADE.getStringType(), null);
        :}
;

argument_list
    ::= argument_list:arguments COMA expression:argument {: RESULT = arguments; RESULT.add(argument); :}
    |   argument_list:arguments COMA default_exp:argument {: RESULT = arguments; RESULT.add(argument); :}
    |   expression:argument {: RESULT = new ArrayList<>(); RESULT.add(argument); :}
    |   default_exp:argument {: RESULT = new ArrayList<>(); RESULT.add(argument);:}
;

default_exp
    ::= DEFAULT:defaultExp {:
            NodeInfo info = new NodeInfo(defaultExpxleft.getLine(), defaultExpxright.getColumn(), filename);
            RESULT = new DefaultArgument(info);
        :}
;