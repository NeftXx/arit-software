/* Generated By:JavaCC: Do not edit this line. GrammarConstants.java */
package com.neftxx.interpreter.javacc;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int CONTINUE = 11;
  /** RegularExpression Id. */
  int FUNCTION = 12;
  /** RegularExpression Id. */
  int TDEFAULT = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int SWITCH = 15;
  /** RegularExpression Id. */
  int BREAK = 16;
  /** RegularExpression Id. */
  int WHILE = 17;
  /** RegularExpression Id. */
  int CASE = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int IN = 21;
  /** RegularExpression Id. */
  int DO = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int LIT_ENTERO = 24;
  /** RegularExpression Id. */
  int LIT_DECIMAL = 25;
  /** RegularExpression Id. */
  int LIT_BOOLEANO = 26;
  /** RegularExpression Id. */
  int NULL = 27;
  /** RegularExpression Id. */
  int LIT_STRING = 28;
  /** RegularExpression Id. */
  int ID = 29;
  /** RegularExpression Id. */
  int LAMBDA = 30;
  /** RegularExpression Id. */
  int IGUAL_QUE = 31;
  /** RegularExpression Id. */
  int DIFERENTE_QUE = 32;
  /** RegularExpression Id. */
  int MAYOR_IGUAL_QUE = 33;
  /** RegularExpression Id. */
  int MENOR_IGUAL_QUE = 34;
  /** RegularExpression Id. */
  int MODULO = 35;
  /** RegularExpression Id. */
  int MAS = 36;
  /** RegularExpression Id. */
  int MENOS = 37;
  /** RegularExpression Id. */
  int MULT = 38;
  /** RegularExpression Id. */
  int DIV = 39;
  /** RegularExpression Id. */
  int POTENCIA = 40;
  /** RegularExpression Id. */
  int IGUAL = 41;
  /** RegularExpression Id. */
  int MAYOR_QUE = 42;
  /** RegularExpression Id. */
  int MENOR_QUE = 43;
  /** RegularExpression Id. */
  int INTERROGANTE = 44;
  /** RegularExpression Id. */
  int DOS_PUNTOS = 45;
  /** RegularExpression Id. */
  int OR = 46;
  /** RegularExpression Id. */
  int AND = 47;
  /** RegularExpression Id. */
  int NOT = 48;
  /** RegularExpression Id. */
  int PAR_IZQ = 49;
  /** RegularExpression Id. */
  int PAR_DER = 50;
  /** RegularExpression Id. */
  int COR_IZQ = 51;
  /** RegularExpression Id. */
  int COR_DER = 52;
  /** RegularExpression Id. */
  int PUNTO_COMA = 53;
  /** RegularExpression Id. */
  int COMA = 54;
  /** RegularExpression Id. */
  int LLAVE_IZQ = 55;
  /** RegularExpression Id. */
  int LLAVE_DER = 56;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"#\"",
    "\"#*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*#\"",
    "<token of kind 10>",
    "\"continue\"",
    "\"function\"",
    "\"default\"",
    "\"return\"",
    "\"switch\"",
    "\"break\"",
    "\"while\"",
    "\"case\"",
    "\"else\"",
    "\"for\"",
    "\"in\"",
    "\"do\"",
    "\"if\"",
    "<LIT_ENTERO>",
    "<LIT_DECIMAL>",
    "<LIT_BOOLEANO>",
    "\"null\"",
    "<LIT_STRING>",
    "<ID>",
    "\"=>\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\"%%\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"?\"",
    "\":\"",
    "\"|\"",
    "\"&\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
  };

}
