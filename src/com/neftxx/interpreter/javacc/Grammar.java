/* Generated By:JavaCC: Do not edit this line. Grammar.java */
package com.neftxx.interpreter.javacc;

import com.neftxx.interpreter.AritLanguage;
import com.neftxx.interpreter.ast.AstNode;
import com.neftxx.interpreter.ast.expression.assignment.Access;
import com.neftxx.interpreter.ast.expression.assignment.Assignment;
import com.neftxx.interpreter.ast.expression.Expression;
import com.neftxx.interpreter.ast.expression.assignment.StructureAssignment;
import com.neftxx.interpreter.ast.expression.function.DefaultArgument;
import com.neftxx.interpreter.ast.expression.function.FunctionCall;
import com.neftxx.interpreter.ast.expression.Identifier;
import com.neftxx.interpreter.ast.expression.Literal;
import com.neftxx.interpreter.ast.expression.operation.*;
import com.neftxx.interpreter.ast.expression.structure.StructureAccess;
import com.neftxx.interpreter.ast.statement.Block;
import com.neftxx.interpreter.ast.expression.function.FormalParameter;
import com.neftxx.interpreter.ast.expression.function.Function;
import com.neftxx.interpreter.ast.statement.Break;
import com.neftxx.interpreter.ast.statement.Continue;
import com.neftxx.interpreter.ast.statement.Return;
import com.neftxx.interpreter.ast.statement.ifStm.IfStatement;
import com.neftxx.interpreter.ast.statement.ifStm.SubIf;
import com.neftxx.interpreter.ast.statement.loop.DoWhileStm;
import com.neftxx.interpreter.ast.statement.loop.ForStm;
import com.neftxx.interpreter.ast.statement.loop.WhileStm;
import com.neftxx.interpreter.ast.statement.switchStm.CaseStm;
import com.neftxx.interpreter.ast.statement.switchStm.SwitchStm;
import com.neftxx.interpreter.ast.type.AritType;
import com.neftxx.interpreter.ast.type.TypeFacade;
import com.neftxx.util.NodeInfo;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;


public class Grammar implements GrammarConstants {
    private AritLanguage aritLanguage;
    private String filename;

    public Grammar(java.io.Reader reader, @NotNull AritLanguage aritLanguage) {
        this(reader);
        this.aritLanguage = aritLanguage;
        this.filename = aritLanguage.filename;
    }

    private void addSyntacticError(String message, Token token) {
        this.aritLanguage.addSyntacticError(message, new NodeInfo(token.beginLine, token.beginColumn, this.filename));
    }

    private static final TypeFacade TYPE_FACADE = TypeFacade.getInstance();

  final public void compilation_unit() throws ParseException {
    ArrayList<AstNode> statements = new ArrayList<AstNode>();
    AstNode statement;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTINUE:
        case RETURN:
        case SWITCH:
        case BREAK:
        case WHILE:
        case FOR:
        case DO:
        case IF:
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        statement = global_statement();
            if (statement != null) statements.add(statement);
      }
      jj_consume_token(0);
            aritLanguage.setAstNodes(statements);
    } catch (ParseException e) {
        addSyntacticError(e.getMessage(), e.currentToken);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PUNTO_COMA);
        aritLanguage.setAstNodes(statements);
    }
  }

  final private AstNode global_statement() throws ParseException {
    AstNode statement;
    if (jj_2_1(7)) {
      statement = function_declaration();
    } else if (jj_2_2(3)) {
      statement = var_declaration();
    } else if (jj_2_3(2)) {
      statement = statement();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final private Function function_declaration() throws ParseException {
    ArrayList<FormalParameter> parameters = null;
    Token id;
    Block block;
    id = jj_consume_token(ID);
    jj_consume_token(IGUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      jj_consume_token(FUNCTION);
      jj_consume_token(PAR_IZQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        parameters = formal_parameter_list();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(PAR_DER);
      break;
    case PAR_IZQ:
      jj_consume_token(PAR_IZQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        parameters = formal_parameter_list();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(PAR_DER);
      jj_consume_token(LAMBDA);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    block = block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(id.beginLine, id.beginColumn, this.filename);
        {if (true) return new Function(info, id.image.toLowerCase(), parameters, block);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<FormalParameter> formal_parameter_list() throws ParseException {
    ArrayList<FormalParameter> list = new ArrayList<FormalParameter>();
    FormalParameter parameter;
    parameter = formal_parameter();
                                   list.add(parameter);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMA);
      parameter = formal_parameter();
                                                  list.add(parameter);
    }
             {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final private FormalParameter formal_parameter() throws ParseException {
    Token token;
    Expression exp = null;
    NodeInfo info;
    token = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      exp = expression();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
        info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new FormalParameter(info, token.image.toLowerCase(), exp);}
    throw new Error("Missing return statement in function");
  }

  final private Block block() throws ParseException {
    Token token;
    ArrayList<AstNode> statements = null;
    token = jj_consume_token(LLAVE_IZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTINUE:
    case RETURN:
    case SWITCH:
    case BREAK:
    case WHILE:
    case FOR:
    case DO:
    case IF:
    case ID:
      statements = block_statements();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_DER);
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new Block(info, statements);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<AstNode> block_statements() throws ParseException {
    ArrayList<AstNode> statements = new ArrayList<AstNode>();
    AstNode statement = null;
    try {
      label_3:
      while (true) {
        if (jj_2_4(2)) {
          statement = statement();
        } else if (jj_2_5(4)) {
          statement = var_declaration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
              if (statement != null) statements.add(statement);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTINUE:
        case RETURN:
        case SWITCH:
        case BREAK:
        case WHILE:
        case FOR:
        case DO:
        case IF:
        case ID:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
      }
         {if (true) return statements;}
    } catch (ParseException e) {
        addSyntacticError(e.getMessage(), e.currentToken);
        Token t;
         do {
            t = getNextToken();
         } while (t.kind != PUNTO_COMA);
         {if (true) return statements;}
    }
    throw new Error("Missing return statement in function");
  }

  final private AstNode statement() throws ParseException {
    AstNode statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      statement = break_statement();
                                      {if (true) return statement;}
      break;
    case CONTINUE:
      statement = continue_statement();
                                      {if (true) return statement;}
      break;
    case RETURN:
      statement = return_statement();
                                      {if (true) return statement;}
      break;
    case IF:
      statement = if_statement();
                                      {if (true) return statement;}
      break;
    case SWITCH:
      statement = switch_statement();
                                      {if (true) return statement;}
      break;
    case WHILE:
      statement = while_statement();
                                      {if (true) return statement;}
      break;
    case DO:
      statement = do_while_statement();
                                      {if (true) return statement;}
      break;
    case FOR:
      statement = for_statement();
                                      {if (true) return statement;}
      break;
    case ID:
      statement = function_call();
                                      {if (true) return statement;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private AstNode var_declaration() throws ParseException {
    Token id;
    ArrayList<Access> access_list = new ArrayList<Access>();
    Expression expression;
    Access access;
    id = jj_consume_token(ID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COR_IZQ:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      access = access();
                          access_list.add(access);
    }
    jj_consume_token(IGUAL);
    expression = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(id.beginLine, id.beginColumn, this.filename);
        if (access_list.size() == 0) {
            {if (true) return new Assignment(info, id.image.toLowerCase(), expression);}
        }
        {if (true) return new StructureAssignment(info, id.image.toLowerCase(), access_list, expression);}
    throw new Error("Missing return statement in function");
  }

  final private Access access() throws ParseException {
    Token token;
    Expression exp1 = null;
    Expression exp2 = null;
    Access.Type accessType = Access.Type.NORMAL;
    token = jj_consume_token(COR_IZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIT_ENTERO:
    case LIT_DECIMAL:
    case LIT_BOOLEANO:
    case NULL:
    case LIT_STRING:
    case ID:
    case MENOS:
    case NOT:
    case PAR_IZQ:
      exp1 = expression();
                                      accessType = Access.Type.NORMAL;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        jj_consume_token(COMA);
                                 accessType = Access.Type.TWO_MATRIX;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIT_ENTERO:
        case LIT_DECIMAL:
        case LIT_BOOLEANO:
        case NULL:
        case LIT_STRING:
        case ID:
        case MENOS:
        case NOT:
        case PAR_IZQ:
          exp2 = expression();
                                              accessType = Access.Type.ONE_MATRIX;
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case COMA:
      jj_consume_token(COMA);
      exp1 = expression();
                                             accessType = Access.Type.THREE_MATRIX;
      break;
    case COR_IZQ:
      jj_consume_token(COR_IZQ);
      exp1 = expression();
      jj_consume_token(COR_DER);
                                                          accessType = Access.Type.TWO_LIST;
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COR_DER);
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        if (exp1 != null && exp2 != null) { {if (true) return new Access(info, exp1, exp2);} }
        {if (true) return new Access(info, exp1, accessType);}
    throw new Error("Missing return statement in function");
  }

  final private Break break_statement() throws ParseException {
    Token token;
    token = jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new Break(info);}
    throw new Error("Missing return statement in function");
  }

  final private Continue continue_statement() throws ParseException {
    Token token;
    token = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new Continue(info);}
    throw new Error("Missing return statement in function");
  }

  final private Return return_statement() throws ParseException {
    Token token;
    Expression expression = null;
    token = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR_IZQ:
      jj_consume_token(PAR_IZQ);
      expression = expression();
      jj_consume_token(PAR_DER);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new Return(info, expression);}
    throw new Error("Missing return statement in function");
  }

  final private IfStatement if_statement() throws ParseException {
    ArrayList<SubIf> if_list;
    Token token_else;
    Block block_else;
    if_list = if_list();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      token_else = jj_consume_token(ELSE);
      block_else = block();
        NodeInfo info = new NodeInfo(token_else.beginLine, token_else.beginColumn, this.filename);
        if_list.add(new SubIf(info, block_else));
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
        NodeInfo info = if_list.get(0).info;
        {if (true) return new IfStatement(info, if_list);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<SubIf> if_list() throws ParseException {
    ArrayList<SubIf> if_list = new ArrayList<SubIf>();
    Token token;
    Expression expression;
    Block block;
    NodeInfo info;
    token = jj_consume_token(IF);
    jj_consume_token(PAR_IZQ);
    expression = expression();
    jj_consume_token(PAR_DER);
    block = block();
        info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        if_list.add(new SubIf(info, expression, block));
    label_5:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(ELSE);
      token = jj_consume_token(IF);
      jj_consume_token(PAR_IZQ);
      expression = expression();
      jj_consume_token(PAR_DER);
      block = block();
        info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        if_list.add(new SubIf(info, expression, block));
    }
        {if (true) return if_list;}
    throw new Error("Missing return statement in function");
  }

  final private SwitchStm switch_statement() throws ParseException {
    Token token;
    Expression expression;
    ArrayList<CaseStm> labels = null;
    token = jj_consume_token(SWITCH);
    jj_consume_token(PAR_IZQ);
    expression = expression();
    jj_consume_token(PAR_DER);
    jj_consume_token(LLAVE_IZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TDEFAULT:
    case CASE:
      labels = switch_labels();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_DER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new SwitchStm(info, expression, labels);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<CaseStm> switch_labels() throws ParseException {
    ArrayList<CaseStm> labels = new ArrayList<CaseStm>();
    CaseStm label;
    label_6:
    while (true) {
      label = switch_label();
        if (label != null) labels.add(label);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TDEFAULT:
      case CASE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
    }
        {if (true) return labels;}
    throw new Error("Missing return statement in function");
  }

  final private CaseStm switch_label() throws ParseException {
    Token token;
    Expression expression = null;
    ArrayList<AstNode> statements = null;
    NodeInfo info = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      token = jj_consume_token(CASE);
      expression = expression();
      jj_consume_token(DOS_PUNTOS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
      case RETURN:
      case SWITCH:
      case BREAK:
      case WHILE:
      case FOR:
      case DO:
      case IF:
      case ID:
        statements = block_statements();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
        info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new CaseStm(info, expression, statements);}
      break;
    case TDEFAULT:
      token = jj_consume_token(TDEFAULT);
      jj_consume_token(DOS_PUNTOS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
      case RETURN:
      case SWITCH:
      case BREAK:
      case WHILE:
      case FOR:
      case DO:
      case IF:
      case ID:
        statements = block_statements();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
        info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new CaseStm(info, null, statements);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private WhileStm while_statement() throws ParseException {
    Token token;
    Expression expression;
    Block block;
    token = jj_consume_token(WHILE);
    jj_consume_token(PAR_IZQ);
    expression = expression();
    jj_consume_token(PAR_DER);
    block = block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new WhileStm(info, expression, block);}
    throw new Error("Missing return statement in function");
  }

  final private DoWhileStm do_while_statement() throws ParseException {
    Token token;
    Block block;
    Expression expression;
    token = jj_consume_token(DO);
    block = block();
    jj_consume_token(WHILE);
    jj_consume_token(PAR_IZQ);
    expression = expression();
    jj_consume_token(PAR_DER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new DoWhileStm(info, expression, block);}
    throw new Error("Missing return statement in function");
  }

  final private ForStm for_statement() throws ParseException {
    Token token;
    Token id;
    Expression expression;
    Block block;
    token = jj_consume_token(FOR);
    jj_consume_token(PAR_IZQ);
    id = jj_consume_token(ID);
    jj_consume_token(IN);
    expression = expression();
    jj_consume_token(PAR_DER);
    block = block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO_COMA:
      jj_consume_token(PUNTO_COMA);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new ForStm(info, id.image.toLowerCase(), expression, block);}
    throw new Error("Missing return statement in function");
  }

  final private FunctionCall function_call() throws ParseException {
    Token id;
    ArrayList<Expression> argument_list = null;
    Expression argument;
    id = jj_consume_token(ID);
    jj_consume_token(PAR_IZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TDEFAULT:
    case LIT_ENTERO:
    case LIT_DECIMAL:
    case LIT_BOOLEANO:
    case NULL:
    case LIT_STRING:
    case ID:
    case MENOS:
    case NOT:
    case PAR_IZQ:
      argument_list = argument_list();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(PAR_DER);
    if (jj_2_7(2)) {
      jj_consume_token(PUNTO_COMA);
    } else {
      ;
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new FunctionCall(info, id.image.toLowerCase(), argument_list);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<Expression> argument_list() throws ParseException {
    ArrayList<Expression> argument_list = new ArrayList<Expression>();
    Expression argument;
    argument = argument();
                          argument_list.add(argument);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMA);
      argument = argument();
                                  argument_list.add(argument);
    }
        {if (true) return argument_list;}
    throw new Error("Missing return statement in function");
  }

  final private Expression argument() throws ParseException {
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIT_ENTERO:
    case LIT_DECIMAL:
    case LIT_BOOLEANO:
    case NULL:
    case LIT_STRING:
    case ID:
    case MENOS:
    case NOT:
    case PAR_IZQ:
      exp = expression();
                       {if (true) return exp;}
      break;
    case TDEFAULT:
      exp = default_argument();
                             {if (true) return exp;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private DefaultArgument default_argument() throws ParseException {
    Token token;
    token = jj_consume_token(TDEFAULT);
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new DefaultArgument(info);}
    throw new Error("Missing return statement in function");
  }

  final private Expression expression() throws ParseException {
    Expression exp;
    exp = conditional_exp();
                            {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final private Expression conditional_exp() throws ParseException {
    Token token;
    Expression exp;
    Expression exp1;
    Expression exp2;
    exp = conditional_or_exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTERROGANTE:
      token = jj_consume_token(INTERROGANTE);
      exp1 = expression();
      jj_consume_token(DOS_PUNTOS);
      exp2 = conditional_exp();
            NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
            exp = new Ternary(info, exp, exp1, exp2);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final private Expression conditional_or_exp() throws ParseException {
    Token token;
    Expression exp1;
    Expression exp2;
    exp1 = conditional_and_exp();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_8;
      }
      token = jj_consume_token(OR);
      exp2 = conditional_and_exp();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        exp1 = new Logical(info, exp1, exp2, Logical.Operator.OR);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final private Expression conditional_and_exp() throws ParseException {
    Token token;
    Expression exp1;
    Expression exp2;
    exp1 = equality_expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_9;
      }
      token = jj_consume_token(AND);
      exp2 = equality_expression();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        exp1 = new Logical(info, exp1, exp2, Logical.Operator.AND);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final private Expression equality_expression() throws ParseException {
    Token token;
    Expression exp1;
    Expression exp2;
    Comparator.Operator operator = Comparator.Operator.UNEQUAL;
    exp1 = relational_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL_QUE:
      case DIFERENTE_QUE:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL_QUE:
        token = jj_consume_token(IGUAL_QUE);
                                operator = Comparator.Operator.EQUAL;
        break;
      case DIFERENTE_QUE:
        token = jj_consume_token(DIFERENTE_QUE);
                                    operator = Comparator.Operator.UNEQUAL;
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = relational_expression();
            NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
            exp1 = new Comparator(info, exp1, exp2, operator);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final private Expression relational_expression() throws ParseException {
    Token token;
    Expression exp1;
    Expression exp2;
    Comparator.Operator operator;
    exp1 = additive_expression();
    label_11:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYOR_IGUAL_QUE:
        token = jj_consume_token(MAYOR_IGUAL_QUE);
                                                  operator = Comparator.Operator.GREATER_THAN_OR_EQUAL_TO;
        break;
      case MAYOR_QUE:
        token = jj_consume_token(MAYOR_QUE);
                                             operator = Comparator.Operator.GREATER_THAN;
        break;
      case MENOR_IGUAL_QUE:
        token = jj_consume_token(MENOR_IGUAL_QUE);
                                                  operator = Comparator.Operator.LESS_THAN_OR_EQUAL_TO;
        break;
      case MENOR_QUE:
        token = jj_consume_token(MENOR_QUE);
                                             operator = Comparator.Operator.LESS_THAN;
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = additive_expression();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        exp1 = new Comparator(info, exp1, exp2, operator);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final private Expression additive_expression() throws ParseException {
    Token token;
    Expression exp1;
    Expression exp2;
    Arithmetic.Operator operator;
    exp1 = multiplicative_expression();
    label_12:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        token = jj_consume_token(MAS);
                             operator = Arithmetic.Operator.SUM;
        break;
      case MENOS:
        token = jj_consume_token(MENOS);
                             operator = Arithmetic.Operator.SUBTRACTION;
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = multiplicative_expression();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        exp1 = new Arithmetic(info, exp1, exp2, operator);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final private Expression multiplicative_expression() throws ParseException {
    Token token;
    Expression exp1;
    Expression exp2;
    Arithmetic.Operator operator;
    exp1 = pow_expression();
    label_13:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        token = jj_consume_token(MULT);
                          operator = Arithmetic.Operator.MULTIPLICATION;
        break;
      case DIV:
        token = jj_consume_token(DIV);
                          operator = Arithmetic.Operator.DIVISION;
        break;
      case MODULO:
        token = jj_consume_token(MODULO);
                          operator = Arithmetic.Operator.MODULE;
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = pow_expression();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        exp1 = new Arithmetic(info, exp1, exp2, operator);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final private Expression pow_expression() throws ParseException {
    Token token;
    Expression exp1;
    Expression exp2;
    exp1 = unary_expression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCIA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_14;
      }
      token = jj_consume_token(POTENCIA);
      exp2 = unary_expression();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        exp1 = new Arithmetic(info, exp1, exp2, Arithmetic.Operator.POWER);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final private Expression unary_expression() throws ParseException {
    Expression exp = null;
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      token = jj_consume_token(MENOS);
      exp = unary_expression();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new UnarySubtraction(info, exp);}
      break;
    case LIT_ENTERO:
    case LIT_DECIMAL:
    case LIT_BOOLEANO:
    case NULL:
    case LIT_STRING:
    case ID:
    case NOT:
    case PAR_IZQ:
      exp = unary_expression_not_plus_minus();
                                            {if (true) return exp;}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression unary_expression_not_plus_minus() throws ParseException {
    Token token;
    Expression exp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      token = jj_consume_token(NOT);
      exp = unary_expression();
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new Not(info, exp);}
      break;
    case LIT_ENTERO:
    case LIT_DECIMAL:
    case LIT_BOOLEANO:
    case NULL:
    case LIT_STRING:
    case ID:
    case PAR_IZQ:
      exp = primary_expression();
                               {if (true) return exp;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression primary_expression() throws ParseException {
    ArrayList<Access> accesses = null;
    Access access;
    Expression exp;
    exp = primary_prefix();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COR_IZQ:
                             accesses = new ArrayList<Access>();
      label_15:
      while (true) {
        access = access();
                                                                                      accesses.add(access);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_IZQ:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_15;
        }
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
        if (accesses == null) {if (true) return exp;}
        NodeInfo infoExp = exp.info;
        {if (true) return new StructureAccess(infoExp, exp, accesses);}
    throw new Error("Missing return statement in function");
  }

  final private Expression primary_prefix() throws ParseException {
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIT_ENTERO:
    case LIT_DECIMAL:
    case LIT_BOOLEANO:
    case NULL:
    case LIT_STRING:
      exp = literal();
      break;
    default:
      jj_la1[46] = jj_gen;
      if (jj_2_11(2147483647)) {
        exp = function_call();
      } else if (jj_2_12(2147483647)) {
        exp = identifier();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PAR_IZQ:
          jj_consume_token(PAR_IZQ);
          exp = expression();
          jj_consume_token(PAR_DER);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final private Expression identifier() throws ParseException {
    Token id;
    id = jj_consume_token(ID);
        NodeInfo info = new NodeInfo(id.beginLine, id.beginColumn, this.filename);
        {if (true) return new Identifier(info, id.image.toLowerCase());}
    throw new Error("Missing return statement in function");
  }

  final private Expression literal() throws ParseException {
    Token token;
    Object value;
    AritType type = TYPE_FACADE.getUndefinedType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIT_ENTERO:
      token = jj_consume_token(LIT_ENTERO);
            value = 0;
            try {
                type = TYPE_FACADE.getIntegerType();
                value = Integer.parseInt(token.image);
            } catch(NumberFormatException ex) {
                addSyntacticError("Error: Numero " + token.image + " fuera del rango de un integer.", token);
            }
      break;
    case LIT_DECIMAL:
      token = jj_consume_token(LIT_DECIMAL);
            value = 0.0;
            type = TYPE_FACADE.getNumericType();
            try {
                value = Double.parseDouble(token.image);
            } catch (NumberFormatException ex) {
                addSyntacticError("Error: "+ token.image +" fuera del rango de un decimal.", token);
            }
      break;
    case LIT_BOOLEANO:
      token = jj_consume_token(LIT_BOOLEANO);
            value = Boolean.parseBoolean(token.image);
            type = TYPE_FACADE.getBooleanType();
      break;
    case LIT_STRING:
      token = jj_consume_token(LIT_STRING);
            String tempImage = token.image.substring(1, token.image.length() - 1);
            tempImage = tempImage.replace("\\\\","\\").replace("\\\"","\"")
                                .replace("\\n","\n").replace("\\t","\t").replace("\\r","\r");
            value = tempImage;
            type = TYPE_FACADE.getStringType();
      break;
    case NULL:
      token = jj_consume_token(NULL);
            value = null;
            type = TYPE_FACADE.getStringType();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        NodeInfo info = new NodeInfo(token.beginLine, token.beginColumn, this.filename);
        {if (true) return new Literal(info, type, value);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(COR_IZQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    if (jj_scan_token(COR_DER)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(DIFERENTE_QUE)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(IGUAL_QUE)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(PAR_IZQ)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_35()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LIT_STRING)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(LIT_BOOLEANO)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LIT_DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LIT_ENTERO)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(INTERROGANTE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(PAR_IZQ)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(PAR_IZQ)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    if (jj_3R_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(PAR_IZQ)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    if (jj_3R_74()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(PUNTO_COMA)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(LLAVE_IZQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(LLAVE_DER)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(PAR_IZQ)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(POTENCIA)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(PAR_IZQ)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(PAR_IZQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_DER)) return true;
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(PAR_IZQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_DER)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(IGUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(PAR_IZQ)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(MAS)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(MENOR_QUE)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(MENOR_IGUAL_QUE)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(PAR_IZQ)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(MAYOR_QUE)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(MAYOR_IGUAL_QUE)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(COR_IZQ)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public GrammarTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20d3c800,0x20000000,0x20000000,0x1000,0x0,0x0,0x0,0x20d3c800,0x20d3c800,0x20d3c800,0x0,0x0,0x3f000000,0x0,0x3f000000,0x0,0x0,0x0,0x0,0x80000,0x0,0x42000,0x0,0x42000,0x20d3c800,0x20d3c800,0x42000,0x0,0x0,0x0,0x3f002000,0x0,0x3f002000,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x3f000000,0x3f000000,0x0,0x0,0x1f000000,0x0,0x1f000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x20000,0x200000,0x400000,0x200,0x0,0x0,0x0,0x80000,0x200000,0x30020,0x400000,0x4b0020,0x200000,0x200000,0x20000,0x200000,0x0,0x200000,0x0,0x200000,0x0,0x0,0x0,0x0,0x200000,0x200000,0x200000,0x30020,0x400000,0x30020,0x1000,0x4000,0x8000,0x1,0x1,0xc06,0x30,0xc8,0x100,0x30020,0x30000,0x80000,0x80000,0x0,0x20000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 49; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
